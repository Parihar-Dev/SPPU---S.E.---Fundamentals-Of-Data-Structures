/*
Queues are frequently used in computer programming and a typical example is the creation of a job queue
by an operating system. If the operating system does not use priorities, then the jobs are processed
in the order they enter the system. Write C++ program for simulating job queue. Write functions to add
job and delete job from queue.
*/

#include<iostream>
#define MAX 10
using namespace std;

struct queue{
    int data[MAX];
    int front,rear;
};

class Queue
{
    struct queue q;
    public:
        Queue()
        {
            q.front = q.rear = -1;
        }
        int isempty();
        int isfull();
        void enqueue(int);
        int delqueue();
        void display();
};

int Queue::isempty()
{
    if (q.front == q.rear)
        return 1;
    else
        return 0;
}

int Queue::isfull()
{
    if (q.rear == MAX - 1)
        return 1;
    else
        return 0;
}

void Queue::enqueue(int x)
{
    ++q.rear;
    q.data[q.rear] = x;
}

int Queue::delqueue()
{
    int val = q.data[q.front];
    ++q.front;
    return val;
}

void Queue::display()
{
    int i;
    cout<<endl;
    for(i=q.front+1;i <= q.rear;i++)
        cout<<q.data[i]<<" ";
}

int main()
{
    Queue obj;
    int ch,x;
    do
    {
        cout<<"\n1.Insert Job\n2.Delete Job\n3.Display\n4.Exit\nEnter your choice : ";
        cin>>ch;
        switch(ch)
        {
            case 1 :
                if(!obj.isfull())
                {
                    cout<<"Enter the element : ";
                    cin>>x;
                    obj.enqueue(x);
                    cout<<endl;
                }
                else
                    cout<<"Queue is Overflow";
                break;
            
            case 2 :
                if (!obj.isempty())
                    obj.delqueue();
                else
                    cout<<"Queue is underflow";
                cout<<"Remaining Jobs : ";
                obj.display();
                break;
            case 3 :
                if (!obj.isempty())
                {
                    cout<<"Queue Contains : ";
                    obj.display();
                }
                else
                {
                    cout<<"Queue is empty";
                }
                break;

            case 4 : cout<<"Exiting Program !!!";
        }
    }while(ch!=4);
    return 0;
}
